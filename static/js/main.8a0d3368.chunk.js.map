{"version":3,"sources":["images sync /^/.*/.jpg$","images/davis.jpg","images/durant.jpg","images/giannis.jpg","images/harden.jpg","images/kawhi.jpg","images/lebron.jpg","images/luka.jpg","images/stephen.jpg","components/LuckyImage/index.js","App.js","data.js","serviceWorker.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","ClickableImage","props","src","image","name","onClick","statePlayers","player","require","App","useState","wins","setWins","losses","setLosses","alreadyClicked","setalreadyClicked","images","setImages","className","key","newImages","sort","a","b","Math","random","includes","newAlreadyClicked","push","length","handleClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mLAAA,IAAIA,EAAM,CACT,cAAe,GACf,eAAgB,GAChB,gBAAiB,GACjB,eAAgB,GAChB,cAAe,GACf,eAAgB,GAChB,aAAc,GACd,gBAAiB,IAIlB,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,I,gBC7BpBU,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,8FCM5BC,G,MAJQ,SAACC,GAAD,OACrB,yBAAKC,IAAKD,EAAME,MAAOC,KAAMH,EAAMG,KAAMC,QAASJ,EAAMI,YCEpDC,ECLU,CACd,QACA,SACA,UACA,SACA,QACA,SACA,OACA,WDH2BrB,IAAI,SAACsB,GAAD,MAAa,CAC5CH,KAAMG,EACNL,IAAKM,MAAQ,YAAYD,EAAb,YA+CCE,EA5CH,WAAO,IAAD,EACQC,mBAAS,GADjB,mBACTC,EADS,KACHC,EADG,OAEYF,mBAAS,GAFrB,mBAETG,EAFS,KAEDC,EAFC,OAG4BJ,mBAAS,IAHrC,mBAGTK,EAHS,KAGOC,EAHP,OAIYN,mBAASJ,GAJrB,mBAITW,EAJS,KAIDC,EAJC,KAuBhB,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,6CACA,2EACA,qCAAWR,GACX,uCAAaE,GACb,6BACGI,EAAOhC,IAAI,SAACkB,GAAD,OACV,kBAAC,EAAD,CACEA,MAAOA,EAAMD,IACbkB,IAAKjB,EAAMC,KACXC,QAAS,kBA7BD,SAACD,GACnB,IAAMiB,EAAYJ,EAAOK,KAAK,SAACC,EAAGC,GAAJ,MAAU,GAAMC,KAAKC,WAEnD,GADAR,EAAUG,GACNN,EAAeY,SAASvB,GAC1BU,EAAUD,EAAS,OACd,CACL,IAAMe,EAAiB,YAAOb,GAC9Ba,EAAkBC,KAAKzB,GACnBwB,EAAkBE,SAAWb,EAAOa,QACtClB,EAAQD,EAAO,GACfK,EAAkB,KAElBA,EAAkBY,IAiBGG,CAAY5B,EAAMC,eEjC3B4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.8a0d3368.chunk.js","sourcesContent":["var map = {\n\t\"./davis.jpg\": 13,\n\t\"./durant.jpg\": 14,\n\t\"./giannis.jpg\": 15,\n\t\"./harden.jpg\": 16,\n\t\"./kawhi.jpg\": 17,\n\t\"./lebron.jpg\": 18,\n\t\"./luka.jpg\": 19,\n\t\"./stephen.jpg\": 20\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 12;","module.exports = __webpack_public_path__ + \"static/media/davis.f7a32113.jpg\";","module.exports = __webpack_public_path__ + \"static/media/durant.6a1694c0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/giannis.e7c19b57.jpg\";","module.exports = __webpack_public_path__ + \"static/media/harden.dcb4a25a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/kawhi.fb3780fe.jpg\";","module.exports = __webpack_public_path__ + \"static/media/lebron.da97028c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/luka.4d3a7836.jpg\";","module.exports = __webpack_public_path__ + \"static/media/stephen.a0a4d04a.jpg\";","import React from \"react\";\r\n\r\nconst ClickableImage = (props) => (\r\n  <img src={props.image} name={props.name} onClick={props.onClick} />\r\n);\r\n\r\nexport default ClickableImage;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport ClickableImage from \"./components/LuckyImage\";\nimport players from \"./data\";\n\nconst statePlayers = players.map((player) => ({\n  name: player,\n  src: require(`./images/${player}.jpg`),\n}));\n\nconst App = () => {\n  const [wins, setWins] = useState(0);\n  const [losses, setLosses] = useState(0);\n  const [alreadyClicked, setalreadyClicked] = useState([]);\n  const [images, setImages] = useState(statePlayers);\n\n  const handleClick = (name) => {\n    const newImages = images.sort((a, b) => 0.5 - Math.random());\n    setImages(newImages);\n    if (alreadyClicked.includes(name)) {\n      setLosses(losses + 1);\n    } else {\n      const newAlreadyClicked = [...alreadyClicked];\n      newAlreadyClicked.push(name);\n      if (newAlreadyClicked.length === images.length) {\n        setWins(wins + 1);\n        setalreadyClicked([]);\n      } else {\n        setalreadyClicked(newAlreadyClicked);\n      }\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1> Memory Game!</h1>\n        <h2>Click each picture exactly one time to win!</h2>\n        <h3>Wins: {wins}</h3>\n        <h3>Losses: {losses}</h3>\n        <div>\n          {images.map((image) => (\n            <ClickableImage\n              image={image.src}\n              key={image.name}\n              onClick={() => handleClick(image.name)}\n            />\n          ))}\n        </div>\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n","const players = [\r\n  \"davis\",\r\n  \"durant\",\r\n  \"giannis\",\r\n  \"harden\",\r\n  \"kawhi\",\r\n  \"lebron\",\r\n  \"luka\",\r\n  \"stephen\",\r\n];\r\n\r\nexport default players;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}